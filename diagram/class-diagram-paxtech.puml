@startuml classDiagram

' Shared Context
package "shared Context" {
    ' patron money
    class Money <<ValueObject>> {
        -amount: BigDecimal
        -currency: String
        --
        +add(Money): Money
        +subtract(Money): Money
    }

    class AccountId <<ValueObject>> {
        -value: UUID
    }

    class ReservationId <<ValueObject>> {
        -value: UUID
    }
}

' Auth Context
package "auth Context" {
    class Account <<Entity>> {
        -accountId: AccountId
        -email: String
        -passwordHash: String
        -isActive: Boolean
        --
        +activate()
        +deactivate()
        +validatePassword(password: String): Boolean
    }

    Account o--> "1" AccountId
}

' User Context
package "user Context" {
    class User <<AggregateRoot>> {
        -userId: UUID
        -accountId: AccountId
        -name: String
        -email: String
        --
        +updateSalonInfo(name: String, email: String)
    }

    class Client <<Entity>> {
        -clientId: UUID
        -
        --
        -updateClientInfo(name: String, email: String)
    }

    class Salon <<Entity>> {
        -salonId: UUID
        -ownerId: UUID
        -name: String
        -location: String
        -services: List<String>
        --

    }

    User o--> "1" AccountId
    Salon o--> "1" User
    Client o--> "1" User
}

' Scheduling Context
package "scheduling Context" {
    class Reservation <<AggregateRoot>> {
        -reservationId: ReservationId
        -salonId: UUID
        -customerId: AccountId
        -workerId: UUID
        -service: String
        -dateTime: DateTime
        -status: String
        --
        +confirm()
        +cancel()
        +reschedule(newDate: DateTime)
    }

    class Schedule <<Entity>> {
        -workerId: UUID
        -availability: List<TimeSlot>
        --
        +isAvailable(time: DateTime): Boolean
    }

    class TimeSlot <<ValueObject>> {
        -start: DateTime
        -end: DateTime
    }

    Reservation o--> "1" ReservationId
    Reservation o--> "1" AccountId
    Schedule *--> "many" TimeSlot
}

' Payments Context
package "payments Context" {
    class Payment <<AggregateRoot>> {
        -paymentId: UUID
        -reservationId: ReservationId
        -payerId: AccountId
        -amount: Money
        -status: String
        -createdAt: Date
        --
        +markAsPaid()
        +markAsFailed()
    }

    class PaymentVerification <<ValueObject>> {
        -externalTransactionId: String
        -gateway: String
        -details: Map
    }

    Payment o--> "1" Money
    Payment o--> "1" AccountId
    Payment o--> "1" ReservationId
}

@enduml
