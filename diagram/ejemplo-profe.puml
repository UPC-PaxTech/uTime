@startuml classDiagram

' Shared
package "shared Context" {
    class AccountId <<ValueObject>> {
        -value: UUID
    }

    class ReservationId <<ValueObject>> {
        -value: UUID
    }

    class Money <<ValueObject>> {
        -amount: Decimal
        -currency: String
        --
        +add(Money): Money
        +subtract(Money): Money
    }
}

' Auth Context
package "auth Context" {
    class AuthAccount <<Entity>> {
        -accountId: AccountId
        -email: String
        -passwordHash: String
        -isActive: Boolean
        --
        +activate()
        +deactivate()
        +validatePassword(pwd: String): Boolean
    }

    class AuthService {
        +login(email, password)
        +logout(token)
        +generate2FA()
        +validate2FA(code)
    }

    class TokenManager {
        +generateToken(AccountId): Token
        +verifyToken(token): Boolean
    }

    class ExternalAuthAdapter {
        +authenticateWithGoogle(email): Boolean
    }

    AuthAccount o--> "1" AccountId
    AuthService --> TokenManager
    AuthService --> ExternalAuthAdapter
}

' User Context
package "user Context" {
    class User <<AggregateRoot>> {
        -userId: UUID
        -accountId: AccountId
        -name: String
        -email: String
        --
        +updateSalonInfo(name: String, email: String)
    }

    class Client <<Entity>> {
        -clientId: UUID
        -
        --
        -updateClientInfo(name: String, email: String)
    }

    class Salon <<Entity>> {
        -salonId: UUID
        -location: String
        --
    }

    User o--> "1" AccountId
    Salon o--> "1" User
    Client o--> "1" User
}

' Scheduling Context DONEEEEEEEE
package "scheduling Context" {

    class Worker <<Entity>> {
        -workerId: UUID
        -nombre: String
        -schedules: List<ScheduleList>
        --
        +addSchedule(schedule: Schedule)
        +deleteSchedule(schedule: Schedule)
    }

    class Schedule <<Entity>> {
        -scheduleId: ScheduleId
        -date: Date
        -timeSlots: List<TimeSlot>
        --
        +getAvailableSlots(): List<TimeSlot>
        +isSlotAvailable(slotId: TimeSlotId): Boolean
    }

    class TimeSlot <<Entity>> {
        -slotId: TimeSlotId
        -start: DateTime
        -end: DateTime
        -reserved: Boolean
        --
        +markAsReserved()
        +markAsAvailable()
    }

    class TimeSlotId <<ValueObject>> {
        -value: UUID
    }

    class Reservation <<AggregateRoot>> {
        -reservationId: UUID
        -customerId: AccountId
        -salonId: AccountId
        -timeSlots: List<TimeSlotId>
        --
        +cancel()
        +reschedule(newTimeSlotId: TimeSlotId)
    }

    ' Relaciones
    Worker o--> "many" Schedule
    Schedule *--> "many" TimeSlot
    TimeSlot o--> "1" TimeSlotId

    Reservation o--> "1" ReservationId
    Reservation o--> "1" TimeSlotId
    Reservation o--> "1" AccountId
}

' Payments Context
package "payments Context" {
    class Payment <<AggregateRoot>> {
        -pagoId: UUID
        -reservaId: ReservationId
        -clienteId: AccountId
        -monto: Money
        -estado: String
        --
        +marcarPagado()
        +marcarFallido()
    }

    class Factura {
        -numero: String
        -fecha: Date
        -monto: Money
        --
        +generar(pago: Pago)
    }

    class Refund {
        -pagoId: UUID
        -motivo: String
        -estado: String
        --
        +procesar()
    }

    class ExternalPaymentAdapter {
        +enviarPago(Pago): Boolean
        +consultarEstado(id: UUID): String
    }

    Payment o-> "1" ReservationId
    Payment o--> "1" AccountId
    Payment o--> "1" Money
    Factura o--> "1" Payment
    Refund o--> "1" Payment
}

@enduml
