@startuml classDiagram
skinparam style strictuml
title uTime - Domain Class Diagram (Reordenado)

' === Shared Context ===
package "Shared Context" {
    class AccountId <<ValueObject>> {
        - value: UUID
    }

    class ReservationId <<ValueObject>> {
        - value: UUID
    }

    class PaymentId <<ValueObject>> {
        - value: UUID
    }

    class Money <<ValueObject>> {
        - amount: Decimal
        - currency: String
        --
        + add(Money): Money
        + subtract(Money): Money
    }
}

' === Account Management ===
package "Account Management Context" {
    class Account <<AggregateRoot>> {
        - accountId: AccountId
        - email: String
        - passwordHash: String
        - isActive: Boolean
        --
        + erase(): void
        + validatePassword(plain: String): Boolean
        + generateAuthToken(): AuthToken
    }

    class AuthToken <<Entity>> {
        - token: String
        - accountId: AccountId
        - issuedAt: DateTime
        - expiresAt: DateTime
        --
        + revoke(): void
    }

    class AuthAdapter <<Adapter>> {
        + authenticateWithGoogle(oauthCode: String): Boolean
    }

    Account o--> AccountId
    Account --> AuthToken
    Account --> AuthAdapter
    AuthToken o--> AccountId
}

' === User Context ===
package "User Context" {
    class User <<AggregateRoot>> {
        - userId: UUID
        - accountId: AccountId
        - name: String
    }

    class Client <<Entity>> {
        - clientId: UUID
        --
        + updateClientInfo(name: String, email: String)
    }

    class Salon <<Entity>> {
        - salonId: UUID
        - location: String
        - contact: ContactInfo
        --
        + updateSalonInfo(name: String, location: String)
    }

    class ContactInfo <<ValueObject>> {
        - phone: String
        - socialMedia: List<String>
    }

    User o--> AccountId
    Client --> User
    Salon --> User
    Salon o--> ContactInfo
}

' === Scheduling Context ===
package "Scheduling Context" {
    class Worker <<AggregateRoot>> {
        - workerId: UUID
        - nombre: String
        - schedules: List<Schedule>
        --
        + addSchedule(schedule: Schedule)
        + deleteSchedule(schedule: Schedule)
    }

    class Schedule <<Entity>> {
        - scheduleId: UUID
        - date: Date
        - timeSlots: List<TimeSlot>
        --
        + getAvailableSlots(): List<TimeSlot>
        + isSlotAvailable(slotId: TimeSlotId): Boolean
    }

    class TimeSlot <<Entity>> {
        - slotId: TimeSlotId
        - start: DateTime
        - end: DateTime
        - reserved: Boolean
        --
        + markAsReserved()
        + markAsAvailable()
    }

    class TimeSlotId <<ValueObject>> {
        - value: UUID
    }

    class Reservation <<AggregateRoot>> {
        - reservationId: ReservationId
        - customerId: AccountId
        - salonId: AccountId
        - paymentId: PaymentId
        - timeSlots: List<TimeSlotId>
        --
        + cancel()
        + reschedule(newTimeSlotId: TimeSlotId)
    }

    Worker *-- "many" Schedule
    Schedule *-- "many" TimeSlot
    TimeSlot o--> TimeSlotId

    Reservation o--> ReservationId
    Reservation o--> AccountId : customerId
    Reservation o--> AccountId : salonId
    Reservation o--> PaymentId
    Reservation o--> TimeSlotId
}

' === Payments Context ===
package "Payments Context" {
    class Payment <<AggregateRoot>> {
        - paymentId: PaymentId
        - reservationId: ReservationId
        - payerId: AccountId
        - amount: Money
        - status: String
        + markPaid()
        + markFailed()
    }

    class Invoice <<Entity>> {
        - invoiceId: UUID
        - issuedAt: DateTime
        - amount: Money
        + generateFor(p: Payment)
    }

    class PaymentAdapter <<Adapter>> {
        + processPayment(reservationId: ReservationId, payerId: AccountId, amount: Money): Payment
        + refundPayment(paymentId: PaymentId, reason: String): Refund
    }

    Payment o--> PaymentId
    Payment o--> ReservationId
    Payment o--> AccountId
    Payment o--> Money
    Payment --> Invoice
    Payment --> PaymentAdapter
}

@enduml