@startuml classDiagram

' Shared
package "shared Context" {
    class AccountId <<ValueObject>> {
        -value: UUID
    }

    class ReservationId <<ValueObject>> {
        -value: UUID
    }

    class Money <<ValueObject>> {
        -amount: Decimal
        -currency: String
        --
        +add(Money): Money
        +subtract(Money): Money
    }

    class PaymentId <<ValueObject>> {
        - value: UUID
    }
}

package "auth Context" {

    Entity Account <<AggregateRoot>> {
        - accountId: AccountId
        - email: String
        - passwordHash: String
        - isActive: Boolean
        --
        + erase(): void
        + validatePassword(plain: String): Boolean
        + generateAuthToken(): AuthToken
    }

    Entity AuthToken <<Entity>> {
        - token: String
        - accountId: AccountId
        - issuedAt: DateTime
        - expiresAt: DateTime
        --
        + revoke(): void
    }

    class AuthAdapter <<Adapter>> {
        + authenticateWithGoogle(oauthCode: String): Boolean
    }

    Account o--> "1" AccountId
    Account --> AuthToken
    Account --> AuthAdapter

    AuthToken o--> "1" AccountId
}

' User Context
package "user Context" {
    Entity User <<AggregateRoot>> {
        -userId: UUID
        -accountId: AccountId
        -name: String
        --
    }

    Entity Client <<Entity>> {
        -clientId: UUID
        --
        +updateClientInfo(name: String, email: String)
    }

    Entity Salon <<Entity>> {
        -salonId: UUID
        -location: String
        -contact: ContactInfo
        --
        +updateSalontInfo(name: String, location: String)
    }

    class ContactInfo <<ValueObject>> {
        -phone: String
        -socialMedia: List<String>
    }

    Salon o--> "1" ContactInfo
    User o--> "1" AccountId
    Salon o--> "1" User
    Client o--> "1" User
}

' Scheduling Context DONEEEEEEEE
package "scheduling Context" {

    Entity Worker <<Entity>> {
        -workerId: UUID
        -nombre: String
        -schedules: List<ScheduleList>
        --
        +addSchedule(schedule: Schedule)
        +deleteSchedule(schedule: Schedule)
    }

    Entity Schedule <<Entity>> {
        -scheduleId: ScheduleId
        -date: Date
        -timeSlots: List<TimeSlot>
        --
        +getAvailableSlots(): List<TimeSlot>
        +isSlotAvailable(slotId: TimeSlotId): Boolean
    }

    Entity TimeSlot <<Entity>> {
        -slotId: TimeSlotId
        -start: DateTime
        -end: DateTime
        -reserved: Boolean
        --
        +markAsReserved()
        +markAsAvailable()
    }

    class TimeSlotId <<ValueObject>> {
        -value: UUID
    }

    Entity Reservation <<AggregateRoot>> {
        -reservationId: ReservationId
        -customerId: AccountId
        -salonId: AccountId
        -paymentId: PaymentId
        -timeSlots: List<TimeSlotId>
        --
        +cancel()
        +reschedule(newTimeSlotId: TimeSlotId)
    }

    ' Relaciones
    Worker o--> "many" Schedule
    Schedule *--> "many" TimeSlot
    TimeSlot o--> "1" TimeSlotId

    Reservation o--> "1" ReservationId
    Reservation o--> "1" TimeSlotId
    Reservation o--> "1" AccountId
    Reservation o--> "1" PaymentId
}

' Payments Context

package "payments Context" {

    class Payment <<AggregateRoot>> {
        - paymentId: PaymentId
        - reservationId: ReservationId
        - payerId: AccountId
        - amount: Money
        - status: String
        --
        + markPaid()
        + markFailed()
    }


    class PaymentAdapter <<DomainService>> {
        + processPayment(reservationId: ReservationId, payerId: AccountId, amount: Money): Payment
        + refundPayment(paymentId: PaymentId, reason: String): Refund
    }

    class Invoice <<Entity>> {
        - invoiceId: UUID
        - issuedAt: DateTime
        - amount: Money
        --
        + generateFor(p: Payment)
    }


  ' === Relaciones ===
  Payment o--> "1" PaymentId
  Payment o--> "1" ReservationId
  Payment o--> "1" AccountId : payerId
  Payment o--> "1" Money

  PaymentAdapter --> Payment
  PaymentAdapter --> Invoice
}

@enduml
